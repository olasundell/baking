buildscript {
	ext {
		springBootVersion = '2.0.0.M7'
	}
	repositories {
		mavenCentral()
		maven { url 'http://repo.spring.io/snapshot' }
		maven { url 'http://repo.spring.io/milestone/' }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:2.0.0.M5"
//		classpath 'se.transmode.gradle:gradle-docker:1.2'
		classpath 'org.sgornostal:gradle-docker-plugin:1.5.3'
	}
}

plugins {
	id "com.zoltu.git-versioning" version "3.0.3"
	id 'com.github.ben-manes.versions' version '0.17.0'
}

subprojects {
	if (!it.name.equals('zipkin-server')) {
		apply plugin: 'java'
		apply plugin: 'idea'
		apply plugin: 'org.springframework.boot'
		apply plugin: 'io.spring.dependency-management'
		apply plugin: 'spring-cloud-contract'
		apply plugin: 'com.zoltu.git-versioning'

		sourceCompatibility = 1.8

		configurations {
			compile.exclude module: 'commons-logging'
		}

		repositories {
			mavenCentral()
			maven { url "http://repo.spring.io/snapshot" }
			maven { url "http://repo.spring.io/milestone" }
		}

		ext {
			springCloudVersion = 'Finchley.M5'
			springCloudContractVersion = '2.0.0.M5'
		}
		dependencyManagement {
			imports {
				mavenBom "org.springframework.cloud:spring-cloud-contract-dependencies:${springCloudContractVersion}"
				mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
			}
		}

//	if (!it.name.equals('common')) {
//		apply plugin: 'docker'
//
//		dependencies {
//			compile('org.springframework.cloud:spring-cloud-starter-zipkin')
//		}
//
////		task buildDocker(unit: Docker, dependsOn: bootRepackage) {
////			push = true
////			applicationName = jar.baseName
////			dockerfile = file('Dockerfile')
////			doFirst {
////				copy {
////					from jar
////					into stageDir
////				}
////			}
////		}
//
//		dockerRegistries {
//			reg {
//				url = '192.168.99.101:80'
//				email = 'email@email.com'
//				username = 'user'
//				password = 'pwd'
//			}
//			man {
//				url = '192.168.99.101:80'
//				email = 'email@email.com'
//				username = 'user'
//				password = 'pwd'
//			}
//		}
//
//		docker {
//			println ZoltuGitVersioning.versionInfo
//			println jar.archivePath
//
//			dependsOn bootJar
//			imageName = jar.baseName
//			buildArgs = ['JAR_NAME': jar.archiveName ]
//			files jar.archivePath
//			host 'tcp://192.168.99.101:2376'
//		}
//	}

		dependencies {
			compileOnly group: 'org.projectlombok', name: 'lombok'
			compile('org.springframework.boot:spring-boot-starter-actuator')
//		compile('org.springframework.cloud:spring-cloud-starter-bus-kafka')
			compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
			compile('org.springframework.cloud:spring-cloud-starter-openfeign')
//		compile('org.springframework.cloud:spring-cloud-starter-hystrix')
//		compile('org.springframework.cloud:spring-cloud-starter-hystrix-dashboard')
			compile('org.springframework.cloud:spring-cloud-starter-netflix-ribbon')
			compile('org.springframework.cloud:spring-cloud-starter-sleuth')
//		compile('org.springframework.cloud:spring-cloud-starter-zookeeper-config')
//		compile('org.springframework.cloud:spring-cloud-starter-zookeeper-discovery')
//		compile('org.springframework.cloud:spring-cloud-starter-zuul')
			compile('org.springframework.boot:spring-boot-starter-web')
			compile('org.springframework.boot:spring-boot-starter-undertow')
//		runtime('io.zipkin.java:zipkin-autoconfigure-ui')
			testCompile('org.springframework.boot:spring-boot-starter-test')
			testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
			testCompile 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
		}
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.4.1'
	distributionType = Wrapper.DistributionType.ALL
}
